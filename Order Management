"""
ORDER AND CART MANAGEMENT

Orders are sets of items ordered by a customer
An ordered item has four components:
 - a name
 - a quantity (the number of such items bought)
 - a unit price (in pence)
 - a unit weight (in pounds)
Those are represented by a tuple.

NOTE: You can safely assume that all orders have all the required fields
(name, quantity, unit-price and unit-weight) so no validation needs to be made.

DO NOT MODIFY CONSTANTS
"""

ORDER_SAMPLE_1 = {("lamp", 2, 2399, 2), ("chair", 4, 3199, 10), ("table", 1, 5599, 85)}
ORDER_SAMPLE_2 = {("sofa", 1, 18399, 140), ("bookshelf", 2, 4799, 40)}

CATALOGUE = {("table", 9999, 20), ("chair", 2999, 5), ("lamp", 1999, 10)}


def delivery_charges(order):
    """
    Compute the delivery charges for an order. The company charges a flat £50
    fee plus £20 for each 100lbs (additional weight under 100lbs is ignored).

    E.g., delivery_charges({("desk", 1, 11999, 160)}) is 7000 (pence)
    E.g., delivery_charges({("desk", 2, 11999, 160)}) is 11000 (pence)
    E.g., delivery_charges({("lamp", 1, 2399, 2)}) is 5000 (pence)
    E.g., delivery_charges({("lamp", 50, 2399, 2)}) is 7000 (pence)

    :param order: order to process. See samples for examples.
    :return: delivery fee in pence
    :rtype: float | int
    """

    # Select quantities of each item
    quantity = [x[1] for x in order]

    # Select weights of each item
    unit_weight = [x[3] for x in order]

    # Find the weight of each item
    item_order_weight = [a * b for a, b in zip(quantity, unit_weight)]

    # Total order weight
    total_weight = sum(item_order_weight)

    # Total weight rounded down to the nearest 100lbs
    total_weight_nearest_100 = total_weight - total_weight % 100

    # Charge for each 100lbs, multiplying by 20 to reflect charge is per 100lbs rather than every lb
    weight_charge = total_weight_nearest_100 * 20

    # Adding the flat fee
    delivery_fee = weight_charge + 5000
    return delivery_fee


delivery_charges(ORDER_SAMPLE_1)


def total_charge(order):
    """
    Compute the total charge for an order. It includes:
        - total price of items,
        - VAT (20% of the price of items),
        - delivery fee

    NOTE: in this computation, VAT is not applied to the delivery

    E.g., total_charge({("desk", 2, 11999, 160)}) is 39797 (pence)
    E.g., total_charge({("lamp", 50, 2399, 2)}) is 150940 (pence)

    Hint: Look up the built-in Python function round().

    :param order: order to process. See samples.
    :return: total price, in pence, rounded to the nearest penny.
    :rtype: float | int
    """
    # Select quantity
    quantity = [x[1] for x in order]

    # Select unit price
    unit_price = [x[2] for x in order]

    # Sum price of items
    non_vat = sum([a * b for a, b in zip(quantity, unit_price)])

    # Apply vat to items
    with_vat = (non_vat)*1.2

    # Select weights of each individual item type in the order
    unit_weight = [x[3] for x in order]

    # Find total weight of each item type in the order
    order_weight = [a * b for a, b in zip(quantity, unit_weight)]

    # Total order weight
    total_weight = sum(order_weight)

    # Total weight rounded to the nearest 100lbs
    total_weight_nearest_100 = total_weight - total_weight % 100

    # Charge for each 100lbs, multiplying by 20 to reflect charge is per 100lbs rather than every lb
    weight_charge = total_weight_nearest_100 * 20

    # Adding the flat fee
    delivery_fee = weight_charge + 5000
    total = with_vat + delivery_fee

    # Returning the order, rounded to the nearest penny
    total_whole = round(total)

    return total_whole


total_charge(ORDER_SAMPLE_2)


def add_item_to_order(name, quantity, order):
    """
    When a customer adds items to their basket, you need to update their order.

    The customer provides some of the details (the name of the item and
    the quantity they want). The rest (price and weight) needs to be looked up in
    the CATALOGUE provided above.

    NOTE: you must return a new order as a set and leave the argument unmodified.

    NOTE: if the order already contains some of the items, you must update the
    quantity field for that item; otherwise, you must add a new entry in the
    order

    NOTE: if the item cannot be found in the catalogue, the function should raise
    a KeyError.

    E.g., add_item_to_order("table", 1, {("table", 1, 9999, 20)}) is
        {("table", 2, 9999, 20)}
    E.g., add_item_to_order("chair", 1, {("table", 1, 9999, 20)}) is
        {("table", 1, 9999, 20), ("chair", 1, 2999, 5)}

    :param name: name of the item to add
    :param quantity: number of items to add
    :param order: previous order
    :return: a new order with the added items. If the item is unknown, raise a KeyError
    :rtype: set
    """
    # Check item ordered is in the catalogue by identifying
    # if there is a match with the first element of any tuple in the catalogue set'''
    if name not in [item[0] for item in CATALOGUE]:
        # if not, raise a key error
        raise KeyError('item cannot be found in the catalogue')

    # Place the existing order in a list
    order = list(order)

    # Iterate through the existing order and create a dictionary of items in the order,
    # with each item representing a key'''
    names_and_positions_dic = {item[0]: i for i, item in enumerate(order)}

    # When items in the updated order are present in the existing order,
    # add their quantitiy into the existing order with the following procedure'''
    if name in names_and_positions_dic.keys():
        # The index of the item to add to the order is taken from the existing order
        position = names_and_positions_dic[name]

        # The item to add to the order and already present in the existing order,
        # presented in a list with existing quantity, item type and value'''
        curr_item_status = list(order[position])

        # The new quantity of the items, if already present in the order is found,
        # by adding the ordered quantity and existing quantity
        new_quan = curr_item_status[1] + quantity

        # Updating the quantity in the list with details of the item both to add and present in the existing order
        curr_item_status[1] = new_quan

        # The tuple containing the ordered item is updated with the new, increased quantity
        order[position] = tuple(curr_item_status)

    # If items newly ordered are present in the catalogue, but not already in the order,
    # add the item with the quantity ordered into the previous order.
    # The item price and weight is taken from the catalogue
    else:
        for c in CATALOGUE:
            if c[0] == name:
                newitem = (name, quantity, c[1], c[2])
        order.append(newitem)
    return set(order)


add_item_to_order("table", 1, ORDER_SAMPLE_1)
